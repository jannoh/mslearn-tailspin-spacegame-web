trigger:
  - "*"

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: "Release"
  wwwrootDir: "Tailspin.SpaceGame.Web/wwwroot"
  dotnetSdkVersion: "6.x"
  System.Debug: true

steps:
  - task: UseDotNet@2
    displayName: "Use .NET SDK $(dotnetSdkVersion)"
    inputs:
      version: "$(dotnetSdkVersion)"

  - task: Npm@1
    displayName: "Run npm install"
    inputs:
      verbose: false

  - script: "./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)"
    displayName: "Compile Sass assets"

  - task: gulp@1
    displayName: "Run gulp tasks"

  - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    displayName: "Write build info"
    workingDirectory: $(wwwrootDir)

  - bash: |
      echo "
      Build variables (DevOps Services)

      Build.ArtifactStagingDirectory = $(Build.ArtifactStagingDirectory)
      Build.BuildId = $(Build.BuildId)
      Build.BuildNumber = $(Build.BuildNumber)
      Build.BuildUri = $(Build.BuildUri)
      Build.BinariesDirectory = $(Build.BinariesDirectory)
      Build.ContainerId = $(Build.ContainerId)
      Build.CronSchedule.DisplayName = $(Build.CronSchedule.DisplayName)
      Build.DefinitionName =   $(Build.DefinitionName)
      Build.DefinitionVersion =  $(Build.DefinitionVersion)
      Build.QueuedBy =  $(Build.QueuedBy)
      Build.QueuedById = $(Build.QueuedById)
      Build.Reason = $(Build.Reason)
      Build.Repository.Clean = $(Build.Repository.Clean)
      Build.Repository.LocalPath  = $(Build.Repository.LocalPath)
      Build.Repository.ID =  $(Build.Repository.ID)
      Build.Repository.Name= $(Build.Repository.Name)
      Build.Repository.Provider=  $(Build.Repository.Provider)
      Build.Repository.Tfvc.Workspace=  $(Build.Repository.Tfvc.Workspace)
      Build.Repository.Uri =  $(Build.Repository.Uri)
      Build.RequestedFor =  $(Build.RequestedFor)
      Build.RequestedForEmail =$(Build.RequestedForEmail)
      Build.RequestedForId =    $(Build.RequestedForId)
      Build.SourceBranch =   $(Build.SourceBranch)
      Build.SourceBranchName =  $(Build.SourceBranchName)
      Build.SourcesDirectory =  $(Build.SourcesDirectory)
      Build.SourceVersion =    $(Build.SourceVersion)
      Build.SourceVersionMessage =   $(Build.SourceVersionMessage)
      Build.StagingDirectory =     $(Build.StagingDirectory)
      Build.Repository.Git.SubmoduleCheckout = $(Build.Repository.Git.SubmoduleCheckout)
      Build.SourceTfvcShelveset =     $(Build.SourceTfvcShelveset)
      Build.TriggeredBy.BuildId =   $(Build.TriggeredBy.BuildId)
      Build.TriggeredBy.DefinitionId =   $(Build.TriggeredBy.DefinitionId)
      Build.TriggeredBy.DefinitionName =   $(Build.TriggeredBy.DefinitionName)
      Build.TriggeredBy.BuildNumber = $(Build.TriggeredBy.BuildNumber)
      Build.TriggeredBy.ProjectID =  $(Build.TriggeredBy.ProjectID)
      Common.TestResultsDirectory =   $(Common.TestResultsDirectory)

      Pipeline variables (DevOps Services)
      Pipeline.Workspace =    $(Pipeline.Workspace)

      Deployment job variables (DevOps Services)

      Environment.Name =   $(Environment.Name)
      Environment.Id =   $(Environment.Id)
      Environment.ResourceName =  $(Environment.ResourceName)
      Environment.ResourceId =  $(Environment.ResourceId)
      Strategy.Name = $(Strategy.Name)
      Strategy.CycleName =  $(Strategy.CycleName)

      System variables (DevOps Services)

      System.AccessToken =  $(System.AccessToken)
      System.CollectionId =  $(System.CollectionId)
      System.CollectionUri =  $(System.CollectionUri)
      System.DefaultWorkingDirectory =   $(System.DefaultWorkingDirectory)
      System.DefinitionId =   $(System.DefinitionId)
      System.HostType =   $(System.HostType)
      System.JobAttempt =  $(System.JobAttempt)
      System.JobDisplayName =  $(System.JobDisplayName)
      System.JobId =  $(System.JobId)
      System.JobName =    $(System.JobName)
      System.PhaseAttempt =  $(System.PhaseAttempt)
      System.PhaseDisplayName =  $(System.PhaseDisplayName)
      System.PhaseName = $(System.PhaseName)
      System.PlanId =   $(System.PlanId)
      System.PullRequest.IsFork =   $(System.PullRequest.IsFork)
      System.PullRequest.PullRequestId =  $(System.PullRequest.PullRequestId)
      System.PullRequest.PullRequestNumber =  $(System.PullRequest.PullRequestNumber)
      System.PullRequest.targetBranchName =   $(System.PullRequest.targetBranchName)
      System.PullRequest.SourceBranch =   $(System.PullRequest.SourceBranch)
      System.PullRequest.SourceRepositoryURI =  $(System.PullRequest.SourceRepositoryURI)
      System.PullRequest.TargetBranch =     $(System.PullRequest.TargetBranch)
      System.StageAttempt =    $(System.StageAttempt)
      System.StageDisplayName =   $(System.StageDisplayName)
      System.StageName =  $(System.StageName)
      System.TeamFoundationCollectionUri =  $(System.TeamFoundationCollectionUri)
      System.TeamProject = $(System.TeamProject)
      System.TeamProjectId =  $(System.TeamProjectId)
      System.TimelineId = $(System.TimelineId)
      TF_BUILD  =  $(TF_BUILD)


      Checks variables (DevOps Services)

      Checks.StageAttempt =   $(Checks.StageAttempt)

      "
    displayName: "Check Predefined Variable Values"

  - task: DotNetCoreCLI@2
    displayName: "Restore project dependencies"
    inputs:
      command: "restore"
      projects: "**/*.csproj"

  - template: templates/build.yml
    parameters:
      buildConfiguration: "Debug"

  - template: templates/build.yml
    parameters:
      buildConfiguration: "Release"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: drop"
    condition: succeeded()
